version 1.0;

/*
 * Copyright (c) 2015, Juniper Networks, Inc.
 * All rights reserved.
 * Filename      : op-pim-mofrr.slax
 * Author        : Andre Stiphout <andre@juniper.net>
 * Platform      : MX TRIO
 * Release       : Junos 14.1+ (feature introduced with 14.1, script uses mvars)
 * Version       : 0.96
 * Date          : 2015-03-10 20:30
 * Description   : Count per pim interface the active & backup paths for MoFRR
 *
 */

/*
 * The aim of the script is to query the active versus backup paths in use
 * when MoFRR is configured. The script verifies that pim is configured as
 * well as MoFRR. The configured pim interfaces are collected and then all
 * the joins in that instance are inspected to see which join has an active
 * and backup upstream-interface. Only (S,G) interfaces are queried.
 * Only specific interfaces are queried: ge/xe/et/ae, _all_ is not supported.
 * When no instance is provided, the main instance is queried.
 * 
 * CLI responsiveness & MGD util is acceptable for up to a 1000 (S,G).
 * Dual RE/NSR is supported. How to use:
 *
 * When no arguments are provided, Global table is assumed and if MoFRR is
   not active a list of RIs with MoFRR is shows.

    andre@router> op pim-mofrr                          

    Instance Name:      none                          

    MoFRR is not enabled in the Global instance.
    MoFRR is enabled in the following Routing-Instances:
    
        * Test1
        * Test2
        * Test3

 * When a wrong instance is provided, a list of all instances is shown:

    andre@router> op pim-mofrr instance Blah                                                                            

    Instance Name:      Blah                   

    MoFRR is not enabled in this instance.
    MoFRR is enabled in the following Routing-Instances:

        * Test1
        * Test2
        * Test3

 * When MoFRR is enabled and multiple uplinks are present:

    andre@router> op pim-mofrr instance Test1 

    Instance Name:      Test1                 

    Interface Name      Status    Active Joins   Backup Joins   Total Joins    
    xe-0/2/0.60         Up        250            251            501            
    xe-0/2/1.60         Up        250            251            501            
    xe-7/3/2.60         Absent    0              0              0              
    xe-7/3/3.60         Absent    0              0              0              
    xe-2/2/0.60         Up        250            249            499            
    xe-2/2/1.60         Up        250            249            499            
    xe-8/3/3.60         Absent    0              0              0              
    xe-8/3/2.60         Absent    0              0              0              

    Totals                        1000           1000           1499           

 * When MoFRR is enabled but only a single uplink is present:

    andre@router> op pim-mofrr instance Test2       

    Instance Name:      Test2                     

    Interface Name      Status    Active Joins   Backup Joins   Total Joins    
    xe-0/3/1.20         Down      0              0              0              
    xe-7/3/1.20         Absent    0              0              0              
    xe-2/3/1.20         Up        1010           0              1010           
    xe-8/3/1.20         Absent    0              0              0              
    ae14.103            Up        0              0              0              

    Totals                        1010           0              1010           

 * v0.90   Initial release.
 * v0.91   Added checks to verify pim & mofrr are enabled.
 * v0.92   Added support global instance, more error-checking, added totals.
 * v0.93   Modified formatting.
 * v0.94   Major changes:
 *         . fixed error for Global instance (wrong lookup)
 *         . added listing of instances when no/wrong instance as argument
 *         . added interface status for non-existent ifl: absent
 *         . fixed the one-uplink case, which has no active or backup paths
 *         . tried removing duplicate work by adding function/template but
 *           not worth the effort and slows down execution
 * v0.95   Minor changes:
           . fixed error with total Paths
           . fixed error with detection of one-uplink case
           . at the expense of some mvars, removed duplication and decreased runtime
           . updated formatting of output of the routing-instance list
 * v0.96   Fixed another error with total Paths
 *
 */

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

var $arguments = {
    <argument> {
        <name> "instance";
        <description> "Select the routing-instance, none for global instance.";
    }
}
param $instance = "none";


/* open connection to mgd so we can get the data we need */
var $mgd = jcs:open();

match / {

	<op-script-results> {

        /* abort if no connection to local $mgd */
        if ($mgd/..//xnm:error) {
            <xsl:message terminate="yes"> "Error connecting on mgd on this RE";
        }

        /* get the complete configuration inherited */
        var $getConfiguration = <get-configuration database="committed" inherit="inherit">;

        var $configInherited = jcs:execute($mgd, $getConfiguration);

        if ($configInherited/..//xnm:error) {
            <xsl:message terminate="yes"> "Error gathering configuration";
        }

        /* retrieve RE status */
        var $reStatus = { call checkMaster(); }

        /* if this RE is master or if nonstop-routing has been enabled, continue */
        if ( $reStatus == "master" or not( jcs:empty ($configInherited/routing-options/nonstop-routing ))) {

            /* output the instance name */
            <output> "\n";
            <output> jcs:printf( "%-20s%-30s", "Instance Name: ", $instance );
            <output> "\n";

            /* if no instance has been provided, the global instance will be assumed */
            if ( $instance = "none" ) {

                /* verify that mofrr is configured, otherwise exit with an error */
                if( not( jcs:empty( $configInherited/routing-options/multicast/stream-protection ))) {

                    /* verify that pim is configured, otherwise exit with an error */
                    if( not( jcs:empty( $configInherited/protocols/pim ))) {

                        /* get all pim-joins for the instance */
                        var $getPimJoin = <get-pim-join-information> {
                            <sg>;
                        }

                        var $pimJoins = jcs:execute($mgd, $getPimJoin);

                        if ($pimJoins/..//xnm:error) {
                            <xsl:message terminate="yes"> "Error gathering pim join information";
                        }

                        /* get all pim-interfaces for the instance */
                        var $getPimIfls = <get-pim-interfaces-information>;

                        var $pimIfls = jcs:execute($mgd, $getPimIfls);

                        if ($pimIfls/..//xnm:error) {
                            <xsl:message terminate="yes"> "Error gathering pim interface information";
                        }

                        /* output the headers */
                        <output> jcs:printf( "%-20s%-10s%-15s%-15s%-15s", "Interface Name", "Status", "Active Joins", "Backup Joins", "Total Joins" );

                        /* introduce mvars to count the total number of paths */
                        mvar $sumActivePaths = 0;
                        mvar $sumBackupPaths = 0;
                        mvar $sumTotalPaths = 0;

                        /* iterate through all configured PIM interface-names starting with ge, xe, et or ae */
                        for-each( $configInherited/protocols/pim/interface[ (( starts-with( name, "ge" )) or ( starts-with( name, "xe" )) or ( starts-with( name, "et" )) or ( starts-with( name, "ae" )))]) {

                            mvar $activePaths = 0;
                            mvar $backupPaths = 0;
                            mvar $totalPaths = 0;

                            /* only use interfaces that are not disabled */
                            if( not( disable ) ) {

                                /* retrieve the interface name from the pim configuration */
                                var $iflPimName = name;
                                mvar $iflPimStatus = $pimIfls/pim-interface[pim-interface-name == $iflPimName]/status;

                                /* verify the hardware is actually present */
                                if ( jcs:empty( $iflPimStatus )) {

                                    set $iflPimStatus = "Absent";

                                } else {

                                    set $activePaths = count( $pimJoins/join-family/join-group/active-upstream-path[ upstream-interface-name == $iflPimName ]);
                                    set $backupPaths = count( $pimJoins/join-family/join-group/mofrr-backup-upstream-path[ upstream-interface-name == $iflPimName ]);

                                    /* if both active & mofrr-backup are not present, there is only a single upstream interface with a different xpath */
                                    if (( $activePaths = 0 ) and ( $backupPaths = 0 )) {

                                        set $activePaths = count( $pimJoins/join-family/join-group[ upstream-interface-name == $iflPimName ]);

                                    }

                                    set $totalPaths = $activePaths + $backupPaths;

                                }

                                /* print on a single line, the interface-name, the pim-interface status, a count of active and count of backup paths */
                                <output> jcs:printf( "%-20s%-10s%-15s%-15s%-15s",
                                    $iflPimName, $iflPimStatus, $activePaths, $backupPaths, $totalPaths );

                                /* add the number of paths to the total */
                                set $sumActivePaths = $sumActivePaths + $activePaths;
                                set $sumBackupPaths = $sumBackupPaths + $backupPaths;
                                set $sumTotalPaths = $sumTotalPaths + $totalPaths;
  
                            }
                        }

                        /* print the total active/backup paths */
                        <output> "\n";
                        <output> jcs:printf( "%-30s%-15s%-15s%-15s", "Totals", $sumActivePaths, $sumBackupPaths, $sumTotalPaths );

                    } else {

                        <output> "Pim is not enabled in the Global instance.";

                    }

                } else {

                    <output> "MoFRR is not enabled in the Global instance.";

                    call listMofrrInstances( $config = $configInherited );

                }

            /* routing-instance specific */

            } else {

                /* verify that mofrr is configured, otherwise exit with an error */
                if( not( jcs:empty( $configInherited/routing-instances/instance[ name == $instance ]/routing-options/multicast/stream-protection ))) {

                    /* verify that pim is configured, otherwise exit with an error */
                    if( not( jcs:empty( $configInherited/routing-instances/instance[ name == $instance ]/protocols/pim ))) {

                        /* get all pim-joins for the instance */
                        var $getPimJoin = <get-pim-join-information> {
                            <instance> $instance;
                            <sg>;
                        }

                        var $pimJoins = jcs:execute($mgd, $getPimJoin);

                        if ($pimJoins/..//xnm:error) {
                            <xsl:message terminate="yes"> "Error gathering pim join information";
                        }

                        /* get all pim-interfaces for the instance */
                        var $getPimIfls = <get-pim-interfaces-information> {
                            <instance> $instance;
                        }

                        var $pimIfls = jcs:execute($mgd, $getPimIfls);

                        if ($pimIfls/..//xnm:error) {
                            <xsl:message terminate="yes"> "Error gathering pim interface information";
                        }

                        /* output the headers */
                        <output> jcs:printf( "%-20s%-10s%-15s%-15s%-15s", "Interface Name", "Status", "Active Joins", "Backup Joins", "Total Joins" );

                        /* introduce mvars to count the total number of paths */
                        mvar $sumActivePaths = 0;
                        mvar $sumBackupPaths = 0;
                        mvar $sumTotalPaths = 0;

                        /* iterate through all configured PIM interface-names starting with ge, xe, et or ae */
                        for-each( $configInherited/routing-instances/instance[ name == $instance ]/protocols/pim/interface[ (( starts-with( name, "ge" )) or ( starts-with( name, "xe" )) or ( starts-with( name, "et" )) or ( starts-with( name, "ae" )))]) {

                            mvar $activePaths = 0;
                            mvar $backupPaths = 0;
                            mvar $totalPaths = 0;

                            /* only use interfaces that are not disabled */
                            if( not( disable ) ) {

                                /* retrieve the interface name from the pim configuration */
                                var $iflPimName = name;
                                mvar $iflPimStatus = $pimIfls/pim-interface[pim-interface-name == $iflPimName]/status;

                                /* verify the hardware is actually present */
                                if ( jcs:empty( $iflPimStatus )) {

                                    set $iflPimStatus = "Absent";

                                } else {

                                    set $activePaths = count( $pimJoins/join-family/join-group/active-upstream-path[ upstream-interface-name == $iflPimName ]);
                                    set $backupPaths = count( $pimJoins/join-family/join-group/mofrr-backup-upstream-path[ upstream-interface-name == $iflPimName ]);

                                    /* if both active & mofrr-backup are not present, there is only a single upstream interface with a different xpath */
                                    if (( $activePaths = 0 ) and ( $backupPaths = 0 )) {

                                        set $activePaths = count( $pimJoins/join-family/join-group[ upstream-interface-name == $iflPimName ]);

                                    }

                                    set $totalPaths = $activePaths + $backupPaths;

                                }

                                /* print on a single line, the interface-name, the pim-interface status, a count of active and count of backup paths */
                                <output> jcs:printf( "%-20s%-10s%-15s%-15s%-15s",
                                    $iflPimName, $iflPimStatus, $activePaths, $backupPaths, $totalPaths );

                                /* add the number of paths to the total */
                                set $sumActivePaths = $sumActivePaths + $activePaths;
                                set $sumBackupPaths = $sumBackupPaths + $backupPaths;
                                set $sumTotalPaths = $sumTotalPaths + $totalPaths;

                            }
                        }

                        /* print the total active/backup paths */
                        <output> "\n";
                        <output> jcs:printf( "%-30s%-15s%-15s%-15s", "Totals", $sumActivePaths, $sumBackupPaths, $sumTotalPaths );

                    } else {

                        <output> "Pim is not enabled in this instance.";

                    }

                } else {

                    <output> "MoFRR is not enabled in this instance.";

                    call listMofrrInstances( $config = $configInherited );

                }
            }

        } else {
        
            expr jcs:output( "This Routing-Engine is not the Master-RE, neither has NSR been enabled!" );
        
        }
    }

    /* closes the connection handle */
    expr jcs:close( $mgd );
}


template listMofrrInstances( $config ) {

    mvar $routingInstancesMofrr;

    /* walk through all routing-instances  and if mofrr found to be enabled add it to the mvar including tab, star, id and return */
    for-each( $config/routing-instances/instance ) {

        if ( routing-options/multicast/stream-protection ) {

            append $routingInstancesMofrr += "\t";
            append $routingInstancesMofrr += "* ";
            append $routingInstancesMofrr += name;
            append $routingInstancesMofrr += "\n";

        }
    }

    if ( jcs:empty( $routingInstancesMofrr )) {

        <output> "MoFRR is not enabled in any Routing-Instance.";

    } else {

        /* output the mvar, add double-return, tab and star, which is otherwise not in the output, even though it is in the mvar */
        <output> "MoFRR is enabled in the following Routing-Instances:";
        <output> "\n\n\t* " _ $routingInstancesMofrr;

    }
}

template checkMaster() {

    /* master-state is available natively when querying junos-context */
    if ( $junos-context ) {
        if ( $junos-context/re-master ) {
          <output> "master";
        }
        else {
           <output> "backup";
        }
    }
    /* if not available, other means are used to determine mastership */
    else {

        var $getReInfo = <get-route-engine-information> ;
        var $reInfo = jcs:execute( $mgd, $getReInfo );

        if ( $reInfo/..//xnm:error ) { <xsl:message terminate="yes"> "Error getting RE information."; }

        /* if there is only one RE then is has to be master */
        if ( $reInfo/route-engine ) {
            if ( count( $reInfo/route-engine ) == 1 ) {
                <output> "master";
            } else {

                /* this command only works on master RE with MX chassis */
                var $getChassisInfo = <get-chassis-inventory> ;
                var $chassisInfo = jcs:execute( $mgd, $getChassisInfo );

                if ($chassisInfo/..//xnm:error) { <xsl:message terminate="yes"> "Error getting Chassis information."; }

                if ( $chassisInfo/chassis/serial-number ) {
                    <output> "master";
                } else {
                    <output> "backup";
                }
            }
        } else {
            expr jcs:syslog( "daemon.error", $script _ ": ERROR, Unexpected response: " _ $reInfo );
            <xsl:message terminate="yes">;
        }
    }
}
